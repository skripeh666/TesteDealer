@model testeDealer.Models.Venda
@{
    ViewBag.Title = "Editar Venda";
    
}

<h2>Editar Venda</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Venda</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group">
            @Html.LabelFor(model => model.DthVenda, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <input class="form-control" value="@DateTime.Now" id="DthVenda" disabled />
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.IdCliente, "Cliente", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.IdCliente, (SelectList)ViewBag.ClientesList, "Selecione um cliente", htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.IdCliente, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.IdProduto, "Produto", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.IdProduto, (SelectList)ViewBag.ProdutosList, "Selecione um Produto", htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.IdProduto, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.QtdVenda, "Quantidade", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.QtdVenda, new { @class = "form-control", onblur = "calculaTotal()" })
                @Html.ValidationMessageFor(model => model.QtdVenda, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group mt-2 row">
            <div class="col-md-4">
                @Html.LabelFor(model => model.VlrUnitarioVenda, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-4">
                    <input class="form-control" value="@Model.VlrUnitarioVenda.ToString().Replace(",",".")" id="VlrUnitarioVenda" onblur="calculaTotal()" />
                    @Html.ValidationMessageFor(model => model.VlrUnitarioVenda, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-4">
                @Html.LabelFor(model => model.VlrTotalVenda, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-4">
                    <input class="form-control" id="VlrTotalVenda" disabled />
                </div>
            </div>
        </div>

        <div class="form-group mt-2 row">
            <div class="col-md-offset-2 col-md-4">
                <input type="submit" value="Salvar" class="btn btn-primary btn-lg" />
            </div>
            <div class="col-md-offset-2 col-md-4">
                @Html.ActionLink("Voltar à lista", "Index", new object { }, new { @class = "btn btn-dark btn-lg" })
            </div>
        </div>
    </div>
}



@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script type="text/javascript">
        calculaTotal();
        $(document).ready(function () {
            $("form").validate({
                rules: {
                    IdCliente: {
                        required: true,
                    },
                    IdProduto: {
                        required: true
                    },
                    QtdVenda: {
                        required: true,
                        number: true,
                        min: 1
                    },
                    VlrUnitarioVenda: {
                        required: true,

                        min: 0.01
                    },
                    DthVenda: {
                        required: true,
                        date: true
                    }
                },
                messages: {
                    IdCliente: {
                        required: "Por favor, selecione um cliente."
                    },
                    IdProduto: {
                        required: "Por favor, selecione um produto."
                    },
                    QtdVenda: {
                        required: "Por favor, insira a quantidade.",
                        number: "Por favor, insira um valor numérico válido.",
                        min: "A quantidade deve ser maior que zero."
                    },
                    VlrUnitarioVenda: {
                        required: "Por favor, insira o valor unitário.",
                        number: "Por favor, insira um valor numérico válido.",
                        min: "O valor unitário deve ser maior que zero."
                    },
                    DthVenda: {
                        required: "Por favor, insira a data da venda.",
                        date: "Por favor, insira uma data válida."
                    }
                }
            });
        });

        function calculaTotal() {
            var qtdVenda = parseFloat(document.getElementById('QtdVenda').value);
            var vlrUnitarioVenda = parseFloat(document.getElementById('VlrUnitarioVenda').value);

            if (!isNaN(qtdVenda) && !isNaN(vlrUnitarioVenda)) {
                var total = (qtdVenda * vlrUnitarioVenda).toFixed(2);
                document.getElementById('VlrTotalVenda').value = total.replace(".", ",");
                enviarValor();
            }
        }

        function enviarValor() {
            var valorUnitario = document.getElementById('VlrUnitarioVenda').value;
            if (!isNaN(valorUnitario)) {
                $.ajax({
                    url: '@Url.Action("SetValorUnitario", "Venda")',
                    type: 'POST',
                    data: { valorUnitario: valorUnitario },
                    success: function (data) {
                        if (!data.success) {
                            alert('Erro ao enviar o valor.');
                        }
                    }
                });
            } else {
                alert('Por favor, insira um valor válido.');
            }
        }
    </script>
}